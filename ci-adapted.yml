name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Analyse des changements pour optimiser les builds
  changes:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python:
              - 'poc/**'
              - 'core/**'
              - 'requirements*.txt'
              - 'pyproject.toml'
              - '*.py'
            docs:
              - '**/*.md'
              - 'docs/**'

  # Tests Python (Backend/Core)
  python-tests:
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 mypy
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      
      - name: Format check with black
        run: black --check --diff .
      
      - name: Type check with mypy
        run: |
          mypy poc/ core/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true  # Type checking peut √™tre progressif
      
      - name: Test with pytest
        run: |
          pytest --cov=poc --cov=core --cov-report=xml --cov-report=html -v
        env:
          PYTHONPATH: ${{ github.workspace }}
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python
          name: python-${{ matrix.python-version }}

  # Tests d'int√©gration sp√©cifiques au projet
  integration-tests:
    needs: python-tests
    if: always() && (needs.python-tests.result == 'success' || needs.python-tests.result == 'skipped')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Test workflow execution
        run: |
          python -c "
          import sys
          sys.path.append('.')
          try:
              from poc.workflow import MultiAgentWorkflow
              from poc.config import WorkflowConfig
              print('‚úÖ Workflow imports successful')
          except ImportError as e:
              print(f'‚ùå Import error: {e}')
              sys.exit(1)
          "
      
      - name: Test agent initialization
        run: |
          python -c "
          import sys
          sys.path.append('.')
          try:
              from poc.specialized_agents import PlannerAgent, ResearchAgent
              print('‚úÖ Agent imports successful')
          except ImportError as e:
              print(f'‚ùå Agent import error: {e}')
              sys.exit(1)
          "

  # Analyse de s√©curit√©
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r poc/ core/ -f json -o bandit-report.json || true
      
      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Validation de la documentation
  docs-check:
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/mlc_config.json'
      
      - name: Validate README structure
        run: |
          if [ ! -f README.md ]; then
            echo "‚ùå README.md is missing"
            exit 1
          fi
          echo "‚úÖ README.md exists"

  # Notification de succ√®s
  notify-success:
    needs: [python-tests, integration-tests, security-scan]
    if: always() && (needs.python-tests.result == 'success' || needs.python-tests.result == 'skipped')
    runs-on: ubuntu-latest
    
    steps:
      - name: Success notification
        run: |
          echo "üéâ All checks passed successfully!"
          echo "‚úÖ Python tests: ${{ needs.python-tests.result }}"
          echo "‚úÖ Integration tests: ${{ needs.integration-tests.result }}"
          echo "‚úÖ Security scan: ${{ needs.security-scan.result }}"